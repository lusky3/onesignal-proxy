name: Deploy CloudFlare Worker

on:
  push:
    paths:
      - 'worker.js'
      - 'wrangler.toml'
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Cache Wrangler
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-wrangler-v3-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-wrangler-v3-
            ${{ runner.os }}-wrangler-

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Extract Variables from wrangler.toml
        id: extract
        run: |
          if [ ! -f wrangler.toml ]; then
            echo "Error: wrangler.toml is missing!"
            exit 1
          fi
          PROXY_DOMAIN_TOML=$(grep 'PROXY_DOMAIN' wrangler.toml | cut -d'"' -f2 || echo "push.example.com")
          MAIN_DOMAIN_TOML=$(grep 'MAIN_DOMAIN' wrangler.toml | cut -d'"' -f2 || echo "example.com")
          if [ -z "$PROXY_DOMAIN_TOML" ]; then
            PROXY_DOMAIN_TOML="push.example.com"
            echo "Warning: PROXY_DOMAIN not found in wrangler.toml, defaulting to '$PROXY_DOMAIN_TOML'"
          fi
          if [ -z "$MAIN_DOMAIN_TOML" ]; then
            MAIN_DOMAIN_TOML="example.com"
            echo "Warning: MAIN_DOMAIN not found in wrangler.toml, defaulting to '$MAIN_DOMAIN_TOML'"
          fi
          echo "proxy_domain_from_toml=$PROXY_DOMAIN_TOML" >> $GITHUB_OUTPUT
          echo "main_domain_from_toml=$MAIN_DOMAIN_TOML" >> $GITHUB_OUTPUT

      - name: Set Dynamic Variables and Validate
        id: vars
        run: |
          echo "Secret PROXY_DOMAIN value: ${{ secrets.PROXY_DOMAIN }}"
          echo "Secret MAIN_DOMAIN value: ${{ secrets.MAIN_DOMAIN }}"

          if [ -n "${{ secrets.PROXY_DOMAIN }}" ]; then
            PROXY_DOMAIN="${{ secrets.PROXY_DOMAIN }}"
            echo "Assigned PROXY_DOMAIN from secret: $PROXY_DOMAIN"
          else
            PROXY_DOMAIN="${{ steps.extract.outputs.proxy_domain_from_toml }}"
            echo "Assigned PROXY_DOMAIN from wrangler.toml: $PROXY_DOMAIN"
          fi

          if [ -n "${{ secrets.MAIN_DOMAIN }}" ]; then
            MAIN_DOMAIN="${{ secrets.MAIN_DOMAIN }}"
            echo "Assigned MAIN_DOMAIN from secret: $MAIN_DOMAIN"
          else
            MAIN_DOMAIN="${{ steps.extract.outputs.main_domain_from_toml }}"
            echo "Assigned MAIN_DOMAIN from wrangler.toml: $MAIN_DOMAIN"
          fi

          if [ "$PROXY_DOMAIN" = "push.example.com" ]; then
            echo "Error: PROXY_DOMAIN is 'push.example.com', which is not allowed. Secret: '${{ secrets.PROXY_DOMAIN }}', wrangler.toml: '${{ steps.extract.outputs.proxy_domain_from_toml }}'"
            exit 1
          fi
          if [ "$MAIN_DOMAIN" = "example.com" ]; then
            echo "Error: MAIN_DOMAIN is 'example.com', which is not allowed. Secret: '${{ secrets.MAIN_DOMAIN }}', wrangler.toml: '${{ steps.extract.outputs.main_domain_from_toml }}'"
            exit 1
          fi

          if ! echo "$MAIN_DOMAIN" | grep -qE '^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z]{2,}$'; then
            echo "Error: Invalid MAIN_DOMAIN '$MAIN_DOMAIN'. Must be a valid domain (e.g., 'myactualdomain.com', 'somedomain.co.uk')."
            exit 1
          fi

          echo "Final PROXY_DOMAIN: $PROXY_DOMAIN"
          echo "Final MAIN_DOMAIN: $MAIN_DOMAIN"
          echo "proxy_domain=$PROXY_DOMAIN" >> $GITHUB_OUTPUT
          echo "main_domain=$MAIN_DOMAIN" >> $GITHUB_OUTPUT

      - name: Check Credentials
        run: |
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ] || [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "Error: CloudFlare credentials missing!"
            exit 1
          fi
          echo "CloudFlare credentials found."

      - name: Configure Wrangler Routes
        id: config
        run: |
          mkdir -p ~/.wrangler
          echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" > ~/.wrangler/config.json || { echo "Error: Failed to write API token to config.json"; exit 1; }
          echo "account_id = \"${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\"" >> ~/.wrangler/config.json || { echo "Error: Failed to write account ID to config.json"; exit 1; }
          
          ZONE_ID_LINE=$(grep -E '^zone_id\s*=' wrangler.toml || echo "#zone_id = \"00000000000000000000000000000000\"")
          ZONE_NAME_LINE=$(grep -E '^zone_name\s*=' wrangler.toml || echo "zone_name = \"example.com\"")
          ZONE_ID=$(echo "$ZONE_ID_LINE" | cut -d'"' -f2 || echo "00000000000000000000000000000000")
          ZONE_NAME=$(echo "$ZONE_NAME_LINE" | cut -d'"' -f2 || echo "example.com")
          IS_ZONE_ID_COMMENTED=$(echo "$ZONE_ID_LINE" | grep -q '^#' && echo "yes" || echo "no")

          if [ -z "${{ secrets.CLOUDFLARE_ZONE_ID }}" ]; then
            if [ "$IS_ZONE_ID_COMMENTED" = "yes" ]; then
              echo "No CLOUDFLARE_ZONE_ID secret, using zone_name '$ZONE_NAME' from wrangler.toml"
            elif [ "$ZONE_ID" != "00000000000000000000000000000000" ]; then
              echo "No CLOUDFLARE_ZONE_ID secret, zone_id is set to '$ZONE_ID', commenting out zone_name"
              sed -i "s|^zone_name\s*=.*$|#zone_name = \"$ZONE_NAME\"|" wrangler.toml
            fi
          else
            if [ "$ZONE_NAME" != "example.com" ] && [ "$IS_ZONE_ID_COMMENTED" = "no" ] && [ "$ZONE_ID" != "00000000000000000000000000000000" ]; then
              echo "CLOUDFLARE_ZONE_ID set, using existing zone_id '$ZONE_ID', commenting out zone_name"
              sed -i "s|^zone_name\s*=.*$|#zone_name = \"$ZONE_NAME\"|" wrangler.toml
            elif [ "$ZONE_NAME" = "example.com" ] && [ "$IS_ZONE_ID_COMMENTED" = "yes" ]; then
              echo "CLOUDFLARE_ZONE_ID set, updating zone_id with secret, commenting out default zone_name"
              sed -i "s|^zone_name\s*=.*$|#zone_name = \"$ZONE_NAME\"|" wrangler.toml
              sed -i "s|^#zone_id\s*=.*$|zone_id = \"${{ secrets.CLOUDFLARE_ZONE_ID }}\"|" wrangler.toml
            elif [ "$IS_ZONE_ID_COMMENTED" = "yes" ]; then
              echo "CLOUDFLARE_ZONE_ID set, uncommenting and updating zone_id"
              sed -i "s|^#zone_id\s*=.*$|zone_id = \"${{ secrets.CLOUDFLARE_ZONE_ID }}\"|" wrangler.toml
              if grep -q '^zone_name\s*=' wrangler.toml; then
                sed -i "s|^zone_name\s*=.*$|#zone_name = \"$ZONE_NAME\"|" wrangler.toml
              fi
            fi
          fi
          echo "Wrangler configured successfully."

      - name: Update Wrangler Route
        run: |
          sed -i "s|pattern = \"${{ steps.vars.outputs.proxy_domain }}/*\"|pattern = \"${{ steps.vars.outputs.proxy_domain }}/*\"|" wrangler.toml

      - name: Deploy to CloudFlare
        id: deploy
        run: wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Test Worker Deployment
        id: test
        run: |
          echo "Testing Worker at: https://${{ steps.vars.outputs.proxy_domain }}/sdks/web/v16/pushSDK.js"
          echo "Waiting 30 seconds for Worker propagation..."
          sleep 30
          PROXY_URL="https://${{ steps.vars.outputs.proxy_domain }}/sdks/web/v16/pushSDK.js"
          for attempt in {1..3}; do
            echo "Attempt $attempt of 3..."
            STATUS_CODE=$(curl -s -o response.txt -w "%{http_code}" $PROXY_URL 2> curl_error.txt)
            CURL_EXIT_CODE=$?
            if [ $CURL_EXIT_CODE -ne 0 ]; then
              echo "Error: curl failed with exit code $CURL_EXIT_CODE"
              echo "curl error output:"
              cat curl_error.txt
              if [ $attempt -lt 3 ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
                continue
              else
                echo "All attempts failed."
                exit 1
              fi
            fi
            if [ $STATUS_CODE -ne 200 ]; then
              echo "Error: Deployment test failed with status $STATUS_CODE from $PROXY_URL"
              echo "Response body:"
              cat response.txt
              if [ $attempt -lt 3 ]; then
                echo "Retrying in 10 seconds..."
                sleep 10
                continue
              else
                echo "All attempts failed."
                exit 1
              fi
            fi
            echo "Deployment test passed: Status $STATUS_CODE from $PROXY_URL"
            rm response.txt curl_error.txt
            break
          done

      - name: Notify Discord on Success
        if: success() && env.DISCORD_WEBHOOK_URL != ''
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ env.DISCORD_WEBHOOK_URL }}
          color: "#48f442"
          username: "Deploy Bot"
          message: "CloudFlare Worker Deployment Successful | Repository: ${{ github.repository }} | Commit: ${{ github.sha }} | Deployed to: ${{ steps.vars.outputs.proxy_domain }} | Status: Success"

      - name: Notify Discord on Failure
        if: failure() && env.DISCORD_WEBHOOK_URL != ''
        uses: appleboy/discord-action@v1.2.0
        with:
          webhook_url: ${{ env.DISCORD_WEBHOOK_URL }}
          color: "#ff0000"
          username: "Deploy Bot"
          message: "CloudFlare Worker Deployment Failed | Repository: ${{ github.repository }} | Commit: ${{ github.sha }} | Deployed to: ${{ steps.vars.outputs.proxy_domain || 'unknown' }} | Error: ${{ steps.config.outcome == 'failure' && 'Failed to configure Wrangler' || steps.deploy.outcome == 'failure' && 'Deployment failed - check API token setup' || steps.test.outcome == 'failure' && 'Test failed' || 'Unknown error' }} | Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

env:
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}